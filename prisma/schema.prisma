// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique @db.VarChar(255)
  login      String      @unique @db.VarChar(255)
  role       Status      @default(UNKNOWN)
  name       String      @db.VarChar(255)
  campus     Campus      @default(UNKNOWN)
  groups     UserGroup[]
  Grade      Grade[]
  Connection Connexion[]
}

enum Status {
  STUDENT
  TEACHER
  ADMIN
  UNKNOWN
}

enum Campus {
  PARIS
  TOULOUSE
  RENNES
  STRASBOURG
  LYON
  UNKNOWN
}

model Group {
  slug        String      @unique @db.VarChar(255)
  name        String      @db.VarChar(255)
  kind        String      @db.VarChar(255)
  user_groups UserGroup[]
  modules     Module[]
  semesters   Semester[]
  subjects    Subject[]
}

model UserGroup {
  id Int @id @default(autoincrement())

  group      Group  @relation(fields: [group_slug], references: [slug], onDelete: Cascade)
  group_slug String

  current Boolean

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Semester {
  id Int @id @default(autoincrement())

  group      Group?  @relation(fields: [group_slug], references: [slug], onDelete: SetNull)
  group_slug String?

  name    String
  modules Module[]
}

model Module {
  id Int @id @default(autoincrement())

  semester   Semester? @relation(fields: [semesterId], references: [id], onDelete: SetNull)
  semesterId Int?

  code String @db.VarChar(255)
  name String @db.VarChar(255)
  coef Float  @default(1)

  group      Group?  @relation(fields: [group_slug], references: [slug], onDelete: SetNull)
  group_slug String?

  subjects Subject[]
}

model Subject {
  id Int @id @default(autoincrement())

  module   Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  moduleId Int?

  code      String @db.VarChar(255)
  name      String @db.VarChar(255)
  coef      Float  @default(1)
  threshold Float  @default(0)

  group      Group?  @relation(fields: [group_slug], references: [slug], onDelete: SetNull)
  group_slug String?

  controlTypes SubjectControlType[]
}

model ControlType {
  code               String               @unique @db.VarChar(255)
  name               String               @db.VarChar(255)
  SubjectControlType SubjectControlType[]
}

model SubjectControlType {
  id Int @id @default(autoincrement())

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  controlType     ControlType @relation(fields: [controlTypeCode], references: [code])
  controlTypeCode String      @db.VarChar(255)

  calcul     CalculType @default(LINEAR)
  calculData Json       @default("{}")

  coef    Float     @default(1)
  Control Control[]
}

enum CalculType {
  LINEAR
  THRESHOLDS
}

model Control {
  id Int @id @default(autoincrement())

  subjectControlType   SubjectControlType @relation(fields: [subjectControlTypeId], references: [id])
  subjectControlTypeId Int

  name String @db.VarChar(255)
  data Json   @default("{}")

  Grade Grade[]
}

model Grade {
  id Int @id @default(autoincrement())

  control   Control @relation(fields: [controlId], references: [id])
  controlId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  value Json @default("{}")
}

model Connexion {
  id Int @id @default(autoincrement())

  user      User   @relation(fields: [userLogin], references: [login])
  userLogin String @db.VarChar(255)

  createAt DateTime @default(now())
}
